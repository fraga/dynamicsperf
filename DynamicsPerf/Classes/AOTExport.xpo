Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: AOTExport unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #AOTExport
    PROPERTIES
      Name                #AOTExport
      Extends             #SysOperationServiceController
      Origin              #{C4043C9B-C656-415B-8D84-2E570DCF6BAE}
      LegacyId            #50001
    ENDPROPERTIES
    
    METHODS
      SOURCE #canGoBatch
        #public boolean canGoBatch()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class AOTExport extends SysOperationServiceController
        #{
        #    int     threads;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new()
        #{
        #    super(classStr(AOTExport), methodStr(AOTExport, performOperation), SysOperationExecutionMode::Asynchronous);
        #}
      ENDSOURCE
      SOURCE #performOperation
        #[SysEntryPointAttribute]
        #public void performOperation(AOTExportDataContract _dataContract)
        #{
        #    BatchHeader         header;
        #    Dictionary          dict = new Dictionary();
        #    int                 totalTables, rangeStart, rangeEnd, step, i = 0, addCount;
        #    AOTExportTableRun   tableRunTask;
        #    try
        #    {
        #        threads = _dataContract.parmThreads();
        #
        #        if(!this.canGoBatch() || !this.isInBatch())
        #            throw error('this must be run in batch');
        #
        #        header = BatchHeader::getCurrentBatchHeader();
        #
        #        totalTables = dict.tableCnt();
        #        rangeEnd = totalTables;
        #        rangeStart = 1;
        #
        #        step = totalTables / threads;
        #
        #        while(threads && i < threads)
        #        {
        #            i++;
        #            if(i == threads)
        #                rangeEnd = totalTables;
        #            else
        #                rangeEnd = rangeStart + step;
        #
        #            tableRunTask = new SysOperationServiceController(classStr(AOTExportTableRun), methodStr(AOTExportTableRun, generateTableMetaData));
        #             //sets the task batch
        #            tableRunTask.parmLoadFromSysLastValue(false);
        #            tableRunTask.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
        #            tableRunTask.batchInfo().parmCaption(strFmt('ranges from %1 to %2', tableId2name(dict.tableCnt2Id(rangeStart)), tableId2name(dict.tableCnt2Id(rangeEnd))));
        #
        #            header.addRuntimeTask(tableRunTask, BatchHeader::getCurrentBatchTask().RecId);
        #
        #            rangeStart = rangeEnd + 1;
        #        }
        #
        #        header.save();
        #
        #    }
        #    catch(Exception::UpdateConflict)
        #    {
        #        retry;
        #    }
        #    catch(Exception::Deadlock)
        #    {
        #        retry;
        #    }
        #    catch
        #    {
        #        throw error('Error while performing operation');
        #    }
        #}
      ENDSOURCE
      SOURCE #construct
        #public static AOTExport construct()
        #{
        #    AOTExport aotExport = new AOTExport();
        #
        #    aotExport.parmLoadFromSysLastValue(false);
        #    aotExport.batchInfo().parmBatchExecute(true);
        #
        #    return aotExport;
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args args)
        #{
        #    AOTExport   aotExport = AOTExport::construct();
        #
        #    aotExport.startOperation();
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: END
