Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: AOTExport unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #AOTExport
    PROPERTIES
      Name                #AOTExport
      Extends             #SysOperationServiceController
      Origin              #{C4043C9B-C656-415B-8D84-2E570DCF6BAE}
      LegacyId            #50001
    ENDPROPERTIES
    
    METHODS
      SOURCE #canGoBatchJournal
        #protected boolean canGoBatchJournal()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #class AOTExport extends SysOperationServiceController
        #{
        #
        #}
      ENDSOURCE
      SOURCE #new
        #public void new()
        #{
        #    super(classStr(AOTExport), methodStr(AOTExport, performOperation), SysOperationExecutionMode::Asynchronous);
        #}
      ENDSOURCE
      SOURCE #performOperation
        #[SysEntryPointAttribute]
        #public void performOperation()
        #{
        #}
      ENDSOURCE
      SOURCE #run
        #public void run()
        #{
        #    DictTable           dictTable;
        #    DictIndex           dictIndex;
        #    DictField           dictField;
        #    str                 primaryKey;
        #    str                 clusteredIndex;
        #    Dictionary          dictionary = new Dictionary();
        #    AotTableProperties  aotTableProperties;
        #    AotIndexProperties  aotIndexProperties;
        #    AotIndexFields      aotIndexFields;
        #    RecordInsertList    tableList;
        #    RecordInsertList    indexList;
        #    RecordInsertList    fieldList;
        #    DatabaseLog         databaseLog;
        #    UtilIdElements      utilIdElements;
        #    int64               start, stop;
        # //
        # // Variables used when looping through dictionary objects
        # // The variable is either initialized to 1 or to max # of objects
        # // Then set to the objects ID.
        # // Variable is first character of object type:
        # //     t for table
        # //     i for index
        # //     f for field
        # //     m for method
        # //
        #    int                 t;
        #    int                 i;
        #    int                 f;
        #    int                 m;
        # //
        # // Boolean variables used to indicate data method overrides or AOS validation
        # //
        #    boolean             insertmethodoverridden;
        #    boolean             updatemethodoverridden;
        #    boolean             deletemethodoverridden;
        #    boolean             aosvalidateinsert;
        #    boolean             aosvalidateupdate;
        #    boolean             aosvalidatedelete;
        # //
        # // Boolean variables used to indicate database logging or events enabled
        # //
        #    boolean             databaseloginsert;
        #    boolean             databaselogdelete;
        #    boolean             databaselogupdate;
        #    boolean             databaselogrenamekey;
        #    boolean             eventinsert;
        #    boolean             eventdelete;
        #    boolean             eventupdate;
        #    boolean             eventrenamekey;
        #    ;
        #
        #    start = WinAPI::getTickCount64();
        #//
        #//  Delete existing rows - we overwrite all 3 tables on each run
        #//
        #    delete_from aotTableProperties;
        #    delete_from aotIndexProperties;
        #    delete_from aotIndexFields;
        #
        #    tableList = new RecordInsertList(tableNum(aotTableProperties));
        #    indexList = new RecordInsertList(tableNum(aotIndexProperties));
        #    fieldList = new RecordInsertList(tableNum(aotIndexFields));
        #
        #//
        #//  Loop through table object in the the dictionary
        #//  Variable t is set to table id as we loop dictionary
        #//  Only SQL tables (not tmp or map) are selected
        #//
        #    t = dictionary.tableNext(0);
        #    while (t)
        #    {
        #        dictTable = dictionary.tableObject(t);
        #        if (dictTable.isSql() && !dictTable.isTempDb() && !dictTable.isTmp() && !dictTable.isView())
        #        {
        #//
        #//          Loop through all methods for the table
        #//          Variable m is set to method #
        #//          We lookup for data methods and AOS validate methods
        #//
        #            insertmethodoverridden  = false;
        #            updatemethodoverridden  = false;
        #            deletemethodoverridden  = false;
        #            aosvalidateinsert       = false;
        #            aosvalidateupdate       = false;
        #            aosvalidatedelete       = false;
        #
        #            for(m=1;m<=dictTable.objectMethodCnt();m++)
        #            {
        #                switch (dictTable.objectMethod(m))
        #                {
        #                    case 'insert':
        #                        insertmethodoverridden  = true;
        #                        break;
        #                    case 'update':
        #                        updatemethodoverridden  = true;
        #                        break;
        #                    case 'delete':
        #                        deletemethodoverridden  = true;
        #                        break;
        #                    case 'AosValidateInsert':
        #                        aosvalidateinsert       = true;
        #                        break;
        #                    case 'AosValidateUpdate':
        #                        aosvalidateupdate       = true;
        #                        break;
        #                    case 'AosValidateDelete':
        #                        aosvalidatedelete       = true;
        #                        break;
        #                }
        #            }
        #//
        #//          Loop through databaselog records for the table
        #//          looking for logging and events
        #//
        #            databaseloginsert       = false;
        #            databaselogdelete       = false;
        #            databaselogupdate       = false;
        #            databaselogrenamekey    = false;
        #            eventinsert             = false;
        #            eventdelete             = false;
        #            eventupdate             = false;
        #            eventrenamekey          = false;
        #
        #            while select logType from databaseLog
        #                where databaseLog.logTable == dictTable.id()
        #            {
        #//
        #//              Refer to "DatabaseLogType System Enumeration" in system documentation
        #//
        #                switch (databaseLog.logType)
        #                {
        #                    case 0:
        #                        databaseloginsert   = true;
        #                        break;
        #                    case 1:
        #                        databaselogdelete   = true;
        #                        break;
        #                    case 2:
        #                        databaselogupdate   = true;
        #                        break;
        #                    case 3:
        #                        databaselogrenamekey= true;
        #                        break;
        #                    case 4:
        #                        eventinsert         = true;
        #                        break;
        #                    case 5:
        #                        eventdelete         = true;
        #                        break;
        #                    case 6:
        #                        eventupdate         = true;
        #                        break;
        #                    case 7:
        #                        eventrenamekey      = true;
        #                        break;
        #                }
        #            }
        #//
        #//          Set clustered amd primary key index names if present
        #//
        #            primaryKey      = '';
        #            clusteredIndex  = '';
        #
        #            dictIndex = dictTable.indexObject(dictTable.primaryIndex());
        #            if (dictIndex)
        #                primaryKey = dictIndex.name(DbBackend::Sql);
        #
        #            dictIndex = dictTable.indexObject(dictTable.clusterIndex());
        #            if (dictIndex)
        #                clusteredIndex = dictIndex.name(DbBackend::Sql);
        #
        #//
        #//          Set Highest Application Layer for Table
        #//
        #
        #            select firstonly utilLevel from utilIdElements
        #            order by utilLevel desc
        #            where utilIdElements.id == dictTable.id()
        #            &&    utilIdElements.recordType == UtilElementType::Table;
        #
        #
        #//
        #//          Set aotTableProperties and insert
        #//
        #            aotTableProperties.TableName                = dictTable.name(DbBackend::Sql);
        #            aotTableProperties.TableGroup               = dictTable.tableGroup();
        #            aotTableProperties.OCCEnabled               = dictTable.occEnabled();
        #            aotTableProperties.CacheLookup              = dictTable.cacheLookup();
        #            aotTableProperties.PrimaryKey               = primaryKey;
        #            aotTableProperties.ClusteredIndex           = clusteredIndex;
        #            aotTableProperties.InsertMethodOverridden   = insertmethodoverridden;
        #            aotTableProperties.UpdateMethodOverridden   = updatemethodoverridden;
        #            aotTableProperties.DeleteMethodOverridden   = deletemethodoverridden;
        #            aotTableProperties.DataPerCompany           = dictTable.dataPrCompany();
        #            aotTableProperties.AosValidateInsert        = aosvalidateinsert;
        #            aotTableProperties.AosValidateUpdate        = aosvalidateupdate;
        #            aotTableProperties.AosValidateDelete        = aosvalidatedelete;
        #            aotTableProperties.DatabaseLogInsert        = databaseloginsert;
        #            aotTableProperties.DatabaseLogDelete        = databaselogdelete;
        #            aotTableProperties.DatabaseLogUpdate        = databaselogupdate;
        #            aotTableProperties.DatabaseLogRenameKey     = databaselogrenamekey;
        #            aotTableProperties.EventInsert              = eventinsert;
        #            aotTableProperties.EventDelete              = eventdelete;
        #            aotTableProperties.EventUpdate              = eventupdate;
        #            aotTableProperties.EventRenameKey           = eventrenamekey;
        #            aotTableProperties.TabId                    = dictTable.id();
        #            aotTableProperties.applayer                 = enum2str(utilIdElements.utilLevel);
        #            if (aotTableProperties.TableName!="")
        #            {
        #                tableList.add(aotTableProperties);
        #
        #
        #    //
        #    //          Loop though table's indexes
        #    //          We bypass if index is not enabled
        #    //
        #                i = dictTable.indexNext(0);
        #                while (i)
        #                {
        #                    dictIndex = dictTable.indexObject(i);
        #                    if (dictIndex && dictIndex.enabled() == true)
        #                    {
        #    //                  Set Highest Application Layer for Index
        #    //
        #
        #                        select firstonly utilLevel from utilIdElements
        #                        order by utilLevel desc
        #                        where utilIdElements.name == dictIndex.name()
        #                        &&    utilIdElements.recordType == UtilElementType::TableIndex
        #                        &&    utilIdElements.parentId == aotTableProperties.TabId;
        #
        #
        #    //
        #
        #    //
        #    //                  Set aotIndexProperties and insert
        #    //
        #                        aotIndexProperties.TableName        = dictTable.name(DbBackend::Sql);
        #                        aotIndexProperties.IndexName        = dictIndex.name(DbBackend::Sql);
        #                        aotIndexProperties.AllowDuplicates  = dictIndex.allowDuplicates();
        #                        aotIndexProperties.IndexId          = dictIndex.id();
        #                        aotIndexProperties.AppLayer         = enum2str(utilIdElements.utilLevel);
        #
        #
        #                        indexList.add(aotIndexProperties);
        #
        #
        #                        for (f=1;f<=dictIndex.numberOfFields(); f++)
        #                        {
        #
        #                            dictField                   = new DictField(dictTable.id(), dictIndex.field(f));
        #                            aotIndexFields.TableName    = dictTable.name(DbBackend::Sql);
        #                            aotIndexFields.IndexName    = dictIndex.name(DbBackend::Sql);
        #                            aotIndexFields.FieldPosition= f;
        #                            aotIndexFields.FieldName    = dictField.name(DbBackend::Sql);
        #                            fieldList.add(aotIndexFields);
        #                        }
        #                    }
        #                    i = dictTable.indexNext(i);
        #                }
        #            }
        #        }
        #        t = dictionary.tableNext(t);
        #    }
        #    tableList.insertDatabase();
        #    indexList.insertDatabase();
        #    fieldList.insertDatabase();
        #    stop  = WinAPI::getTickCount64();
        #    Info(strFmt('AOTExport Duration: %1 ms', stop - start));
        #}
        #
      ENDSOURCE
      SOURCE #main
        #public server static void main(Args args)
        #{
        #    AOTExport   aotExport;
        #    ;
        #
        #
        #
        #    aotExport = new AOTExport();
        #
        #
        #
        #    aotExport.run();
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: END
